{{- if .Values.deployment -}}
{{- $env := include "base.env" . -}}
{{- $proj := include "base.proj" . -}}
{{- $name := include "base.name" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $env }}-{{ $proj }}-{{ $name }}
  namespace: {{ $env }}-{{ $proj }}
  labels:
    app: {{ $proj }}-{{ $name }}
spec:
  replicas: {{ default 1 .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app: {{ $proj }}-{{ $name }}
  {{- if .Values.deployment.revisionHistoryLimit }}
  revisionHistoryLimit: {{ .Values.deployment.revisionHistoryLimit }}
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ $proj }}-{{ $name }}
      annotations:
        {{- if .Values.deployment.hashicorp }}
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-limits-cpu: "250m"
        vault.hashicorp.com/agent-limits-mem: "64Mi"
        vault.hashicorp.com/agent-requests-cpu : "50m"
        vault.hashicorp.com/agent-requests-mem : "64Mi"
        vault.hashicorp.com/agent-pre-populate-only : "true"
        vault.hashicorp.com/role: "{{ $env }}-{{ $proj }}"
        vault.hashicorp.com/ca-cert: "/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        {{- if .Values.hashicorpv1 }}
        vault.hashicorp.com/agent-inject-secret-database: "{{ $proj }}/{{ $env }}/values"
        vault.hashicorp.com/agent-inject-template-database: |
          {{`{{ with secret "`}}{{ $proj }}/{{ $env }}{{`/values" }} `}}
            {{- range $k, $v := .Values.deployment.hashicorp }}
            {{- range $varname, $varvalue := $v }}
            export {{ $varname }}{{`="{{ `}}{{ $varvalue }}{{`  }}"`}}
            {{- end }}
            {{- end }}`
          {{`{{- end }}`}}
        {{- else }}
        vault.hashicorp.com/agent-inject-secret-database: "{{ $proj }}/data/{{ $env }}/values"
        vault.hashicorp.com/agent-inject-template-database: |
          {{`{{ with secret "`}}{{ $proj }}/data/{{ $env }}{{`/values" }} `}}
            {{- range $k, $v := .Values.deployment.hashicorp }}
            {{- range $varname, $varvalue := $v }}
            export {{ $varname }}{{`="{{ .Data.`}}{{ $varvalue }}{{`  }}"`}}
            {{- end }}
            {{- end }}`
          {{`{{- end }}`}}
        {{- end }}
        {{- end }}
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if .Values.deployment.securityContext }}
      securityContext:
        runAsUser: {{.Values.deployment.securityContext.runAsUser }}
        runAsGroup: {{.Values.deployment.securityContext.runAsGroup }}
      {{- end }}
      containers:
      - name: {{ $proj }}-{{ $name }}
        image: "{{ .Values.deployment.imagePath }}:{{ .Values.module_version }}"
        {{ if .Values.deployment.command }}
        command: ["{{ .Values.deployment.command }}"]
        {{- if or .Values.deployment.commandArgs }}
        args:
          {{- range $k, $v := .Values.deployment.commandArgs }}
          - {{ $v | quote }}
          {{- end }}
        {{- end }}
        {{- end }}
        ports:
        {{- range $k, $v := .Values.deployment.containerPort }}
        - containerPort: {{ $v }}
        {{- end }}
        {{- if or .Values.deployment.volumes .Values.deployment.pvc }}
        volumeMounts:
        {{- if .Values.deployment.volumes }}
        {{- range .Values.deployment.volumes }}
        - name: {{ .volumeName | replace "ENV" $env | replace "." "-" }}
          mountPath: {{ .mountPath | replace "ENV" $env }}
          {{- if .subPath }}
          subPath: {{ .subPath | replace "ENV" $env }}
          {{- end }}
          {{- if .readOnly }}
          readOnly: true
          {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        env:
        {{- if .Values.deployment.environments }}
        {{- range $k, $v := .Values.deployment.environments }}
        {{- range $envname, $envvalue := $v }}
        - name: {{ $envname }}
          value: {{ $envvalue | replace "ENV" $env | quote}}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.deployment.resources }}
        resources:
          requests:
            cpu: {{ .Values.deployment.resources.requests.cpu }}
            memory: {{ .Values.deployment.resources.requests.memory }}
          limits:
            cpu: {{ .Values.deployment.resources.limits.cpu }}
            memory: {{ .Values.deployment.resources.limits.memory }}
        {{- end }}
        {{- if .Values.deployment.lifecycle }}
        lifecycle:
          {{- if .Values.deployment.lifecycle.postStart }}
          postStart:
            exec:
              command: ["/bin/sh", "-c", "{{ .Values.deployment.lifecycle.postStart.command }}"]
          {{- end }}
          {{- if .Values.deployment.lifecycle.preStop }}
          postStart:
            exec:
              command: ["/bin/sh", "-c", "{{ .Values.deployment.lifecycle.preStop.command }}"]
          {{- end }}
        {{- end }}
        {{- if .Values.deployment.startupProbe }}
        startupProbe:
          {{ .Values.deployment.startupProbe.probeType }}:
              path: {{ .Values.deployment.startupProbe.path }}
              port: {{ .Values.deployment.startupProbe.port }}
          failureThreshold: {{ .Values.deployment.startupProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.deployment.startupProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.deployment.startupProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.deployment.startupProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.deployment.readinessProbe }}
        readinessProbe:
          {{ .Values.deployment.readinessProbe.probeType }}:
              path: {{ .Values.deployment.readinessProbe.path }}
              port: {{ .Values.deployment.readinessProbe.port }}
          failureThreshold: {{ .Values.deployment.readinessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.deployment.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.deployment.readinessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.deployment.livenessProbe }}
        livenessProbe:
          {{ .Values.deployment.livenessProbe.probeType }}:
            path: {{ .Values.deployment.livenessProbe.path }}
            port: {{ .Values.deployment.livenessProbe.port }}
          initialDelaySeconds: {{ .Values.deployment.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.deployment.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.deployment.livenessProbe.failureThreshold }}
        {{- end }}
      {{- if gt .Values.deployment.replicas 1.0 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: {{ $name }}
              topologyKey: dc
      {{- end }}
      {{- if or .Values.deployment.volumes .Values.deployment.pvc }}
      volumes:
        {{- if .Values.deployment.volumes }}
        {{- range .Values.deployment.volumes }}
        - name: {{ .volumeName | replace "ENV" $env | replace "." "-"  }}
          {{- if eq .volumeType "emptyDir" }}
          {{ `emptyDir: {}` }}
          {{- else }}
          {{ .volumeType }}:
          {{- end }}
            {{- if eq .volumeType "configMap" }}
            name: {{ .name | replace "APACHE" $name | replace "ENV" $env | replace "." "-" }}
            {{- end }}
            {{- if eq .volumeType "secret" }}
            secretName: {{ $env }}-{{ $proj }}-secret-{{ $name }}-{{ .name | replace "APACHE" $name | replace "ENV" $env | replace "." "-" }}
            {{- end }}
            {{- if eq .volumeType "persistentVolumeClaim" }}
            secretName: {{ .name | replace "ENV" $env | replace "." "-" }}
            {{- end }}
            {{- if .items }}
            items:
            {{- range .items }}
            - key: {{ .key | replace "ENV" $env }}
              path: {{ .path | replace "ENV" $env }}
            {{- end }}
            {{- end }}
            {{- if eq .volumeType "hostPath" }}
            path: {{ .mountPath }}
            type: {{ .hostPathType }}
            {{- end }}
        {{- end }}
        {{- end }}
      {{- end }}
{{- end }}
